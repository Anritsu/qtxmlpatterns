/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtXmlPatterns module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:COMM$
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** $QT_END_LICENSE$
**
**
**
**
**
**
**
**
**
**
**
**
**
**
**
**
**
**
**
****************************************************************************/

//
//  W A R N I N G
//  -------------
//
// This file is not part of the Qt API.  It exists purely as an
// implementation detail.  This header file may change from version to
// version without notice, or even be removed.
//
// We mean it.
//

/* NOTE: This file is AUTO GENERATED by qautomaton2cpp.xsl. */

#ifndef QPatternist_XsdSchemaToken_h
#define QPatternist_XsdSchemaToken_h

#include <QtCore/QString>

QT_BEGIN_NAMESPACE

class XsdSchemaToken
                {
                public:
                enum NodeName

                {
                NoKeyword,
Abstract,
All,
Alternative,
Annotation,
Any,
AnyAttribute,
Appinfo,
AppliesToEmpty,
Assert,
Assertion,
Attribute,
AttributeFormDefault,
AttributeGroup,
Base,
Block,
BlockDefault,
Choice,
Collapse,
ComplexContent,
ComplexType,
Default,
DefaultAttributes,
DefaultAttributesApply,
DefaultOpenContent,
Documentation,
Element,
ElementFormDefault,
Enumeration,
Extension,
Field,
Final,
FinalDefault,
Fixed,
Form,
FractionDigits,
Group,
Id,
Import,
Include,
ItemType,
Key,
Keyref,
Length,
List,
MaxExclusive,
MaxInclusive,
MaxLength,
MaxOccurs,
MemberTypes,
MinExclusive,
MinInclusive,
MinLength,
MinOccurs,
Mixed,
Mode,
Name,
Namespace,
Nillable,
NotNamespace,
NotQName,
Notation,
OpenContent,
Override,
Pattern,
Preserve,
ProcessContents,
Public,
Redefine,
Ref,
Refer,
Replace,
Restriction,
Schema,
SchemaLocation,
Selector,
Sequence,
SimpleContent,
SimpleType,
Source,
SubstitutionGroup,
System,
TargetNamespace,
Test,
TotalDigits,
Type,
Union,
Unique,
Use,
Value,
Version,
WhiteSpace,
XML_NS_SCHEMA_URI,
XPathDefaultNamespace,
XmlLanguage,
Xpath
                };

                static inline NodeName toToken(const QString &value);
static inline NodeName toToken(const QStringRef &value);
static NodeName toToken(const QChar *data, int length);
static QString toString(NodeName token);


                private:
                    static inline NodeName classifier2(const QChar *data);
static inline NodeName classifier3(const QChar *data);
static inline NodeName classifier4(const QChar *data);
static inline NodeName classifier5(const QChar *data);
static inline NodeName classifier6(const QChar *data);
static inline NodeName classifier7(const QChar *data);
static inline NodeName classifier8(const QChar *data);
static inline NodeName classifier9(const QChar *data);
static inline NodeName classifier10(const QChar *data);
static inline NodeName classifier11(const QChar *data);
static inline NodeName classifier12(const QChar *data);
static inline NodeName classifier13(const QChar *data);
static inline NodeName classifier14(const QChar *data);
static inline NodeName classifier15(const QChar *data);
static inline NodeName classifier17(const QChar *data);
static inline NodeName classifier18(const QChar *data);
static inline NodeName classifier20(const QChar *data);
static inline NodeName classifier21(const QChar *data);
static inline NodeName classifier22(const QChar *data);
static inline NodeName classifier32(const QChar *data);

                };

                inline XsdSchemaToken::NodeName XsdSchemaToken::toToken(const QString &value)
                {
                    return toToken(value.constData(), value.length());
                }

                inline XsdSchemaToken::NodeName XsdSchemaToken::toToken(const QStringRef &value)
                {
                    return toToken(value.constData(), value.length());
                }

                
QT_END_NAMESPACE

#endif
